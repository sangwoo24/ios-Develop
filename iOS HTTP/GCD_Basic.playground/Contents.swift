import UIKit

// Queue - Main, Global, Custom

// - Main
DispatchQueue.main.async {
    // UI Update
    let view = UIView()
    view.backgroundColor = #colorLiteral(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
}


// - Global
DispatchQueue.global(qos: .userInitiated).async {
    // ÏßÑÏßú ÌïµÏ§ëÏöî, ÏßÄÍ∏à ÎãπÏû• Ìï¥ÏïºÌïòÎäî Í≤É
}

DispatchQueue.global(qos: .userInitiated).async {
    // Í±∞Ïùò Î∞îÎ°ú Ìï¥Ï§òÏïº Ìï† Í≤É, ÏÇ¨Ïö©ÏûêÍ∞Ä Í≤∞Í≥ºÎ•º Í∏∞Îã§Î¶∞Îã§
}

DispatchQueue.global(qos: .default).async {
    // Ïù¥Í±¥ Íµ≥Ïù¥?
}

DispatchQueue.global().async {
    // == default
}

DispatchQueue.global(qos: .utility).async {
    // ÏãúÍ∞ÑÏù¥ Ï¢Ä Í±∏Î¶¨Îäî ÏùºÎì§, ÏÇ¨Ïö©ÏûêÍ∞Ä ÎãπÏû• Í∏∞Îã§Î¶¨ÏßÄ ÏïäÎäî Í≤É : ÎÑ§Ìä∏ÏõåÌÇπ, ÌÅ∞ ÌååÏùº Î∂àÎü¨Ïò§Í∏∞
}

DispatchQueue.global(qos: .background).async {
    // ÏÇ¨Ïö©ÏûêÌïúÌÖå ÎãπÏû• Ïù∏Ïãù Îê† ÌïÑÏöîÍ∞Ä ÏóÜÎäîÍ≤ÉÎì§ : Îâ¥Ïä§Îç∞Ïù¥ÌÑ∞ ÎØ∏Î¶¨ Î∞õÍ∏∞, ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏, ÏòÅÏÉÅ Îã§Ïö¥Î°úÎìú
}


// - Custom
let concurrentQueue = DispatchQueue(label: "concurrent", qos: .background, attributes: .concurrent)
let serialQueue = DispatchQueue(label: "serial", qos: .background)


// Î≥µÌï©Ï†ÅÏù∏ ÏÉÅÌô©
func downloadImageFromServer() -> UIImage {
    // Heavy Task
    return UIImage()
}

func updateImage(image : UIImage){
    
}

DispatchQueue.global(qos: .background).async {
    // download
    let image = downloadImageFromServer()
    
    DispatchQueue.main.async {
        // update UI
        updateImage(image: image)
    }
}


// Sync, Async

// Async
DispatchQueue.global().async {
    for i in 0...5 {
        print("‚òÉÔ∏è\(i)")
    }
}

DispatchQueue.global().async {
    for i in 0...5 {
        print("üî•\(i)")
    }
}
